// automatically generated by Xtext
grammar org.etl_modeling.specdsl.SpecDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.etl_modelling.de/model/ETL_MODEL.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.etl_modelling.de/model/package_enums.ecore" as package_enums
import "platform:/resource/org.etl_modelling.de/model/logmodel.ecore" as logmodel
import "platform:/resource/org.etl_modelling.de/model/type_enums.ecore" as type_enum
import "platform:/resource/org.etl_modelling.de/model/Spec.ecore" as specmodel




SpecPackage returns specmodel::SpecPackage:
	{specmodel::SpecPackage}
	'SpecPackage' name=EString
	(specifications+=Specification)*
	;



Specification returns specmodel::Specification:
	'Specification' name=EString '{'
	 'target' businessrules+=BusinessRule
	 '}';

EString returns ecore::EString:
	STRING | ID;

QualifiedName:
    ID ('.' ID)*;

EBoolean returns ecore::EBoolean:
	'true' | 'false';




enum FieldTypes returns type_enum::FieldTypes:
String = 'String' | Int = 'Int' | Decimal = 'Decimal' | Date = 'Date' | TimeStamp = 'TimeStamp' | HK = 'HK' | TrueFalse = 'TrueFalse';

enum RuleType returns specmodel::RuleType: 
	Aggregation= 'Aggregation' | Dedup= 'Dedup' | Filter = 'Filter' | MultiFire = 'MultiFire' | SingleFire = 'SingleFire'
;

enum JoinType returns type_enum::JoinTypes:
	LEFT='LEFT'|RIGHT='RIGHT'|INNER='INNER'|FULL_OUTER='FULL_OUTER'
;	

BusinessRule returns specmodel::BusinessRule:
	{specmodel::BusinessRule}
	'RuleType'  RuleType=RuleType
	'BusinessRule' name=EString
	(('targetEntity' targetEntity=[logmodel::Entity|QualifiedName])
	|
	('targetRelationship' targetRelationship=[logmodel::Relationship|QualifiedName])
	|
	('targetIncludeSatelit' targetInclude=[logmodel::Include|QualifiedName]))
	
	((sources+=PrimarySource)*)
	;

/*###################################################################################################### */

PrimarySource  returns specmodel::Source:
	'PrimarySource' sourceEntity=[logmodel::Entity|QualifiedName]
	('alias' alias=EString)?
	(('childSources' '['
		(childSources+=Source (childSources+=Source)*)
	']')*)?
;

Source returns specmodel::Source: 
	{specmodel::Source}
	sourceEntity=[logmodel::Entity|QualifiedName]
	('alias' alias=EString)?
	(isMandatory?='mandatory')?
	(isMultiplying?='isMultiplying')?
	(isVector?='Vector')?
	('VectoryKeys' '{' (vectorkeys+=VectorKey ( ',' vectorkeys+=VectorKey)* '}' ))?
	('JoinViaLink' sourceReleationship=[logmodel::Relationship|QualifiedName])?
	('JoinComment' joinComment=EString)?
	('PrimaryJoinFields' '{' (parentJoinFields+=JoinField(',' parentJoinFields+=JoinField)*) '}')?
	('SecondaryJoinField' '{'(childJoinField+=JoinField  (',' childJoinField+=JoinField)*) '}'  )?
	('JoinType' JoinType=JoinType)?
	(('['
		childSources+=Source		
	']')*)?;


VectorKey returns specmodel::VectorKey: 
	vkField=[logmodel::Field|QualifiedName]
;

    
JoinField returns specmodel::JoinField: 
	field=[logmodel::Field|QualifiedName]
;
