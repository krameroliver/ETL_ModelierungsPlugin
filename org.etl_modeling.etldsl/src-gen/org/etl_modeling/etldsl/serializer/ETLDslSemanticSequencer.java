/*
 * generated by Xtext 2.22.0
 */
package org.etl_modeling.etldsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import logmodel.CommonMapping;
import logmodel.Entity;
import logmodel.Field;
import logmodel.Include;
import logmodel.LogmodelPackage;
import logmodel.Relationship;
import logmodel.logpackage;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.etl_modeling.etldsl.services.ETLDslGrammarAccess;

@SuppressWarnings("all")
public class ETLDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ETLDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LogmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LogmodelPackage.COMMON_MAPPING:
				sequence_CommonMapping(context, (CommonMapping) semanticObject); 
				return; 
			case LogmodelPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case LogmodelPackage.FIELD:
				sequence_Field(context, (Field) semanticObject); 
				return; 
			case LogmodelPackage.INCLUDE:
				sequence_Include(context, (Include) semanticObject); 
				return; 
			case LogmodelPackage.RELATIONSHIP:
				sequence_Relationship(context, (Relationship) semanticObject); 
				return; 
			case LogmodelPackage.LOGPACKAGE:
				sequence_logpackage(context, (logpackage) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     CommonMapping returns CommonMapping
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (commonmappinginputfields+=Field commonmappinginputfields+=Field*)? 
	 *         (commonmappingoutputfields+=Field commonmappingoutputfields+=Field*)?
	 *     )
	 */
	protected void sequence_CommonMapping(ISerializationContext context, CommonMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (entityField+=Field entityField+=Field*)? 
	 *         (include+=Include include+=Include*)? 
	 *         (relationships+=Relationship relationships+=Relationship*)?
	 *     )
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Field returns Field
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         type=ft 
	 *         length=EInt? 
	 *         precision=EInt? 
	 *         scale=EInt? 
	 *         original_name=EString? 
	 *         short_describtion=EString? 
	 *         dateFormat=EString? 
	 *         NullIndicator=EString? 
	 *         allowExponent?=EBoolean? 
	 *         hasImplicitComma?=EBoolean? 
	 *         interfaceOnly?=EBoolean? 
	 *         tableOnly?=EBoolean? 
	 *         isFastChanging?=EBoolean?
	 *     )
	 */
	protected void sequence_Field(ISerializationContext context, Field semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Include returns Include
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (includeFields+=[Field|QualifiedName] includeFields+=[Field|QualifiedName]*)? 
	 *         (identifyingfields+=[Field|QualifiedName] identifyingfields+=[Field|QualifiedName]*)?
	 *     )
	 */
	protected void sequence_Include(ISerializationContext context, Include semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Relationship returns Relationship
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         toEntity=[Entity|QualifiedName] 
	 *         (describingFieldsRel+=[Field|QualifiedName] describingFieldsRel+=[Field|QualifiedName]*)? 
	 *         (identifiyingFieldsRel+=[Field|QualifiedName] identifiyingFieldsRel+=[Field|QualifiedName]*)?
	 *     )
	 */
	protected void sequence_Relationship(ISerializationContext context, Relationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     logpackage returns logpackage
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         LAYER=EString? 
	 *         LAYER_TYPE=LAYERTYPE? 
	 *         HISTORISATION=HISTORISATIONTYPE? 
	 *         REPRESENTATION=REPRESENTATIONS? 
	 *         ((commonmapping+=CommonMapping | entity+=Entity) commonmapping+=CommonMapping? (entity+=Entity? commonmapping+=CommonMapping?)*)?
	 *     )
	 */
	protected void sequence_logpackage(ISerializationContext context, logpackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
