/*
 * generated by Xtext 2.22.0
 */
package org.etl_modeling.etldsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import com.google.inject.Inject
import org.etl_modeling.etldsl.generator.SQL.Postgres.BiTemp.DataVault.BiTempDV
import org.etl_modeling.etldsl.generator.Abinitio.DML.CSV_INPUT.DML_CSV_Input
import org.etl_modeling.etldsl.generator.Abinitio.CC_Jobnetz.CC_JobXML
import org.etl_modeling.etldsl.generator.Abinitio.FDSET.FdsetGenerator
import org.etl_modeling.etldsl.generator.Abinitio.PSET.GeneratorReadEntityPset
import org.etl_modeling.etldsl.generator.Abinitio.PSET.GeneratorWriteEntityPset

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ETLDslGenerator extends AbstractGenerator {

@Inject BiTempDV stdv
@Inject ExtensionGenerator eg
@Inject CreateSchema cs
@Inject DML_CSV_Input dml_csv_i
@Inject CC_JobXML xml
@Inject FdsetGenerator fdset
@Inject GeneratorReadEntityPset reg
@Inject GeneratorWriteEntityPset weg


	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		stdv.doGenerate(resource,fsa,context);
		eg.doGenerate(resource,fsa,context);
		cs.doGenerate(resource,fsa,context);
		dml_csv_i.doGenerate(resource,fsa,context);
		xml.doGenerate(resource,fsa,context);
		fdset.doGenerate(resource,fsa,context);
		reg.doGenerate(resource,fsa,context);
		weg.doGenerate(resource,fsa,context);
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
	}
}
