// automatically generated by Xtext
grammar org.etl_modeling.etldsl.ETLDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.etl_modelling.de/model/logmodel.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.etl_modelling.de/model/package_enums.ecore" as package_enums
import "platform:/resource/org.etl_modelling.de/model/type_enums.ecore" as type_enums
import "platform:/resource/org.etl_modelling.de/model//ETL_MODEL.ecore" as ETL_MODEL

logpackage returns logpackage:
	{logpackage}
	'logpackage' name=EString
	
		('LAYER' LAYER=EString)?
		('LAYER_TYPE' LAYER_TYPE=LAYERTYPE)?
		('HISTORISATION' HISTORISATION=HISTORISATIONTYPE)?
		('REPRESENTATION' REPRESENTATION=REPRESENTATIONS)?
		( (commonmapping+=CommonMapping | entity+=Entity) ( "," (commonmapping+=CommonMapping | entity+=Entity))*  )?
	;



EString returns ecore::EString:
	STRING | ID;

enum LAYERTYPE returns package_enums::LAYERTYPE:
				STAGE = 'STAGE' | INTEGRATION = 'INTEGRATION' | EXPORT = 'EXPORT' | REPORTING = 'REPORTING' | HARMONISATION = 'HARMONISATION';

enum HISTORISATIONTYPE returns package_enums::HISTORISATIONTYPE:
				NONE = 'NONE' | DAY_PARTITIONED = 'DAY_PARTITIONED' | MONTH_PARTITIONED = 'MONTH_PARTITIONED' | BITEMPORAL = 'BITEMPORAL';

enum REPRESENTATIONS returns package_enums::REPRESENTATIONS:
				FLAT_TABLE = 'FLAT_TABLE' | BITEMPORAL = 'BITEMPORAL' | ThirdNF = 'ThirdNF' | SNOWFLAKE = 'SNOWFLAKE' | STAR = 'STAR';


CommonMapping returns CommonMapping:
"commonmapping" name=ID
'{'
('InputField' '{' commonmappinginputfields+=Field ( "," commonmappinginputfields+=Field)* '}' )?
('OutputField' '{' commonmappingoutputfields+=Field ( "," commonmappingoutputfields+=Field)* '}' )?
'}'
;



Entity returns Entity:
	{Entity}
	'Entity' name=ID
	'{'
		('entityFields' '{' entityField+=Field ( entityField+=Field)* '}' )?
		(('INCLUDES' '['include+=Include("," include+=Include)* ']')? |	('Relationship' '['relationships+=Relationship("," relationships+=Relationship)* ']')?	)
	'}';

Field returns Field:
	{Field} 
	"Field" name = ID
	"[" 
	("type" type=ft)
	('length' length=EInt)?
	('precision' precision=EInt)?
	('scale' scale=EInt)?
	('original_name' original_name=EString)?
	('short_describtion' short_describtion=EString)?
	('dateFormat' dateFormat=EString)?
	('NullIndicator' NullIndicator=EString)?
	
	('allowExponent:' allowExponent?=EBoolean)?
	('hasImplicitComma:' hasImplicitComma?=EBoolean)?
	('interfaceOnly:'interfaceOnly?=EBoolean)?
	('tableOnly:'tableOnly?=EBoolean)?
	('isFastChanging:'isFastChanging?=EBoolean)?
	"]";



QualifiedName:
    ID ('.' ID)*;
    
EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum  ft returns type_enums::FieldTypes:
	String = 'String' | Date = 'Date' | Decimal = 'Decimal' | HK = 'HK' | Int = 'Int' | TimeStamp = 'TimeStamp' | TrueFalse = 'TrueFalse';
	
Include returns Include: 
name=STRING
('{' includeFields+=Field ( "," includeFields+=Field)* '}' )?;



Relationship returns Relationship:
	{Relationship}
	name=ID
	'FROM: ' fromEntity=[Entity|QualifiedName] 'To: ' toEntity=[Entity|QualifiedName]
	('DescribingFields:{' describingFieldsRel+=[Field|QualifiedName] '}')? 
	('IdentifyingFields:{' identifiyingFieldsRel+=[Field|QualifiedName] '}')?
	;
