/*
 * generated by Xtext 2.22.0
 */
package org.etl_modeling.jobdsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import jobnetz.Job;
import jobnetz.JobnetzPackage;
import jobnetz.ProcessingPoint;
import jobnetz.SchedulePackage;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.etl_modeling.jobdsl.services.JobDslGrammarAccess;

@SuppressWarnings("all")
public class JobDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private JobDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == JobnetzPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case JobnetzPackage.JOB:
				sequence_Job(context, (Job) semanticObject); 
				return; 
			case JobnetzPackage.PROCESSING_POINT:
				sequence_ProcessingPoint(context, (ProcessingPoint) semanticObject); 
				return; 
			case JobnetzPackage.SCHEDULE_PACKAGE:
				sequence_SchedulePackage(context, (SchedulePackage) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Job returns Job
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         RunTime=RunningTime 
	 *         JobType=JobType 
	 *         TECH_SYSTEM=EString 
	 *         ExecutableName=EString 
	 *         (preDecessor+=[Job|QualifiedName] preDecessor+=[Job|QualifiedName]*)? 
	 *         ppPreDecessorprocessingpoint=[ProcessingPoint|QualifiedName]? 
	 *         isTestJob?='isTestJob'?
	 *     )
	 */
	protected void sequence_Job(ISerializationContext context, Job semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProcessingPoint returns ProcessingPoint
	 *
	 * Constraint:
	 *     (name=EString ProcessingPointType=ProcessingPointType (preDecessor+=[Job|QualifiedName] preDecessor+=[Job|QualifiedName]*)?)
	 */
	protected void sequence_ProcessingPoint(ISerializationContext context, ProcessingPoint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SchedulePackage returns SchedulePackage
	 *
	 * Constraint:
	 *     (name=EString processingpoint=ProcessingPoint (jobs+=Job jobs+=Job*)?)
	 */
	protected void sequence_SchedulePackage(ISerializationContext context, SchedulePackage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
