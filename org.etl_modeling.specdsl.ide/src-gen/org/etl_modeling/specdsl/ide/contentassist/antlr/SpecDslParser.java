/*
 * generated by Xtext 2.22.0
 */
package org.etl_modeling.specdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.etl_modeling.specdsl.ide.contentassist.antlr.internal.InternalSpecDslParser;
import org.etl_modeling.specdsl.services.SpecDslGrammarAccess;

public class SpecDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SpecDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SpecDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getBusinessRuleAccess().getAlternatives_5(), "rule__BusinessRule__Alternatives_5");
			builder.put(grammarAccess.getFieldTypesAccess().getAlternatives(), "rule__FieldTypes__Alternatives");
			builder.put(grammarAccess.getRuleTypeAccess().getAlternatives(), "rule__RuleType__Alternatives");
			builder.put(grammarAccess.getJoinTypeAccess().getAlternatives(), "rule__JoinType__Alternatives");
			builder.put(grammarAccess.getSpecPackageAccess().getGroup(), "rule__SpecPackage__Group__0");
			builder.put(grammarAccess.getSpecificationAccess().getGroup(), "rule__Specification__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getBusinessRuleAccess().getGroup(), "rule__BusinessRule__Group__0");
			builder.put(grammarAccess.getBusinessRuleAccess().getGroup_5_0(), "rule__BusinessRule__Group_5_0__0");
			builder.put(grammarAccess.getBusinessRuleAccess().getGroup_5_1(), "rule__BusinessRule__Group_5_1__0");
			builder.put(grammarAccess.getBusinessRuleAccess().getGroup_5_2(), "rule__BusinessRule__Group_5_2__0");
			builder.put(grammarAccess.getPrimarySourceAccess().getGroup(), "rule__PrimarySource__Group__0");
			builder.put(grammarAccess.getPrimarySourceAccess().getGroup_2(), "rule__PrimarySource__Group_2__0");
			builder.put(grammarAccess.getPrimarySourceAccess().getGroup_3(), "rule__PrimarySource__Group_3__0");
			builder.put(grammarAccess.getPrimarySourceAccess().getGroup_3_2(), "rule__PrimarySource__Group_3_2__0");
			builder.put(grammarAccess.getSourceAccess().getGroup(), "rule__Source__Group__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_2(), "rule__Source__Group_2__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_6(), "rule__Source__Group_6__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_6_2(), "rule__Source__Group_6_2__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_6_2_1(), "rule__Source__Group_6_2_1__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_7(), "rule__Source__Group_7__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_8(), "rule__Source__Group_8__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_9(), "rule__Source__Group_9__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_9_2(), "rule__Source__Group_9_2__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_9_2_1(), "rule__Source__Group_9_2_1__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_10(), "rule__Source__Group_10__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_10_2(), "rule__Source__Group_10_2__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_10_2_1(), "rule__Source__Group_10_2_1__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_11(), "rule__Source__Group_11__0");
			builder.put(grammarAccess.getSourceAccess().getGroup_12(), "rule__Source__Group_12__0");
			builder.put(grammarAccess.getSpecPackageAccess().getNameAssignment_2(), "rule__SpecPackage__NameAssignment_2");
			builder.put(grammarAccess.getSpecPackageAccess().getSpecificationsAssignment_3(), "rule__SpecPackage__SpecificationsAssignment_3");
			builder.put(grammarAccess.getSpecificationAccess().getNameAssignment_1(), "rule__Specification__NameAssignment_1");
			builder.put(grammarAccess.getSpecificationAccess().getBusinessrulesAssignment_4(), "rule__Specification__BusinessrulesAssignment_4");
			builder.put(grammarAccess.getBusinessRuleAccess().getRuleTypeAssignment_2(), "rule__BusinessRule__RuleTypeAssignment_2");
			builder.put(grammarAccess.getBusinessRuleAccess().getNameAssignment_4(), "rule__BusinessRule__NameAssignment_4");
			builder.put(grammarAccess.getBusinessRuleAccess().getTargetEntityAssignment_5_0_1(), "rule__BusinessRule__TargetEntityAssignment_5_0_1");
			builder.put(grammarAccess.getBusinessRuleAccess().getTargetRelationshipAssignment_5_1_1(), "rule__BusinessRule__TargetRelationshipAssignment_5_1_1");
			builder.put(grammarAccess.getBusinessRuleAccess().getTargetIncludeAssignment_5_2_1(), "rule__BusinessRule__TargetIncludeAssignment_5_2_1");
			builder.put(grammarAccess.getBusinessRuleAccess().getSourcesAssignment_6(), "rule__BusinessRule__SourcesAssignment_6");
			builder.put(grammarAccess.getPrimarySourceAccess().getSourceEntityAssignment_1(), "rule__PrimarySource__SourceEntityAssignment_1");
			builder.put(grammarAccess.getPrimarySourceAccess().getAliasAssignment_2_1(), "rule__PrimarySource__AliasAssignment_2_1");
			builder.put(grammarAccess.getPrimarySourceAccess().getChildSourcesAssignment_3_2_0(), "rule__PrimarySource__ChildSourcesAssignment_3_2_0");
			builder.put(grammarAccess.getPrimarySourceAccess().getChildSourcesAssignment_3_2_1(), "rule__PrimarySource__ChildSourcesAssignment_3_2_1");
			builder.put(grammarAccess.getSourceAccess().getSourceEntityAssignment_1(), "rule__Source__SourceEntityAssignment_1");
			builder.put(grammarAccess.getSourceAccess().getAliasAssignment_2_1(), "rule__Source__AliasAssignment_2_1");
			builder.put(grammarAccess.getSourceAccess().getIsMandatoryAssignment_3(), "rule__Source__IsMandatoryAssignment_3");
			builder.put(grammarAccess.getSourceAccess().getIsMultiplyingAssignment_4(), "rule__Source__IsMultiplyingAssignment_4");
			builder.put(grammarAccess.getSourceAccess().getIsVectorAssignment_5(), "rule__Source__IsVectorAssignment_5");
			builder.put(grammarAccess.getSourceAccess().getVectorkeysAssignment_6_2_0(), "rule__Source__VectorkeysAssignment_6_2_0");
			builder.put(grammarAccess.getSourceAccess().getVectorkeysAssignment_6_2_1_1(), "rule__Source__VectorkeysAssignment_6_2_1_1");
			builder.put(grammarAccess.getSourceAccess().getSourceReleationshipAssignment_7_1(), "rule__Source__SourceReleationshipAssignment_7_1");
			builder.put(grammarAccess.getSourceAccess().getJoinCommentAssignment_8_1(), "rule__Source__JoinCommentAssignment_8_1");
			builder.put(grammarAccess.getSourceAccess().getParentJoinFieldsAssignment_9_2_0(), "rule__Source__ParentJoinFieldsAssignment_9_2_0");
			builder.put(grammarAccess.getSourceAccess().getParentJoinFieldsAssignment_9_2_1_1(), "rule__Source__ParentJoinFieldsAssignment_9_2_1_1");
			builder.put(grammarAccess.getSourceAccess().getChildJoinFieldAssignment_10_2_0(), "rule__Source__ChildJoinFieldAssignment_10_2_0");
			builder.put(grammarAccess.getSourceAccess().getChildJoinFieldAssignment_10_2_1_1(), "rule__Source__ChildJoinFieldAssignment_10_2_1_1");
			builder.put(grammarAccess.getSourceAccess().getJoinTypeAssignment_11_1(), "rule__Source__JoinTypeAssignment_11_1");
			builder.put(grammarAccess.getSourceAccess().getChildSourcesAssignment_12_1(), "rule__Source__ChildSourcesAssignment_12_1");
			builder.put(grammarAccess.getVectorKeyAccess().getVkFieldAssignment(), "rule__VectorKey__VkFieldAssignment");
			builder.put(grammarAccess.getJoinFieldAccess().getFieldAssignment(), "rule__JoinField__FieldAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SpecDslGrammarAccess grammarAccess;

	@Override
	protected InternalSpecDslParser createParser() {
		InternalSpecDslParser result = new InternalSpecDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SpecDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SpecDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
