/*
 * generated by Xtext 2.22.0
 */
package org.etl_modeling.jobdsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.etl_modeling.jobdsl.ide.contentassist.antlr.internal.InternalJobDslParser;
import org.etl_modeling.jobdsl.services.JobDslGrammarAccess;

public class JobDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(JobDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, JobDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getLAYERTYPEAccess().getAlternatives(), "rule__LAYERTYPE__Alternatives");
			builder.put(grammarAccess.getHISTORISATIONTYPEAccess().getAlternatives(), "rule__HISTORISATIONTYPE__Alternatives");
			builder.put(grammarAccess.getREPRESENTATIONSAccess().getAlternatives(), "rule__REPRESENTATIONS__Alternatives");
			builder.put(grammarAccess.getRunningTimeAccess().getAlternatives(), "rule__RunningTime__Alternatives");
			builder.put(grammarAccess.getJobTypeAccess().getAlternatives(), "rule__JobType__Alternatives");
			builder.put(grammarAccess.getProcessingPointTypeAccess().getAlternatives(), "rule__ProcessingPointType__Alternatives");
			builder.put(grammarAccess.getSchedulePackageAccess().getGroup(), "rule__SchedulePackage__Group__0");
			builder.put(grammarAccess.getSchedulePackageAccess().getGroup_3(), "rule__SchedulePackage__Group_3__0");
			builder.put(grammarAccess.getSchedulePackageAccess().getGroup_4(), "rule__SchedulePackage__Group_4__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getJobAccess().getGroup(), "rule__Job__Group__0");
			builder.put(grammarAccess.getJobAccess().getGroup_4(), "rule__Job__Group_4__0");
			builder.put(grammarAccess.getJobAccess().getGroup_5(), "rule__Job__Group_5__0");
			builder.put(grammarAccess.getJobAccess().getGroup_6(), "rule__Job__Group_6__0");
			builder.put(grammarAccess.getJobAccess().getGroup_7(), "rule__Job__Group_7__0");
			builder.put(grammarAccess.getJobAccess().getGroup_8(), "rule__Job__Group_8__0");
			builder.put(grammarAccess.getJobAccess().getGroup_8_3(), "rule__Job__Group_8_3__0");
			builder.put(grammarAccess.getJobAccess().getGroup_9(), "rule__Job__Group_9__0");
			builder.put(grammarAccess.getProcessingPointAccess().getGroup(), "rule__ProcessingPoint__Group__0");
			builder.put(grammarAccess.getProcessingPointAccess().getGroup_4(), "rule__ProcessingPoint__Group_4__0");
			builder.put(grammarAccess.getProcessingPointAccess().getGroup_5(), "rule__ProcessingPoint__Group_5__0");
			builder.put(grammarAccess.getProcessingPointAccess().getGroup_5_3(), "rule__ProcessingPoint__Group_5_3__0");
			builder.put(grammarAccess.getSchedulePackageAccess().getNameAssignment_2(), "rule__SchedulePackage__NameAssignment_2");
			builder.put(grammarAccess.getSchedulePackageAccess().getProcessingpointAssignment_3_2(), "rule__SchedulePackage__ProcessingpointAssignment_3_2");
			builder.put(grammarAccess.getSchedulePackageAccess().getJobsAssignment_4_2(), "rule__SchedulePackage__JobsAssignment_4_2");
			builder.put(grammarAccess.getSchedulePackageAccess().getJobsAssignment_4_3(), "rule__SchedulePackage__JobsAssignment_4_3");
			builder.put(grammarAccess.getJobAccess().getNameAssignment_2(), "rule__Job__NameAssignment_2");
			builder.put(grammarAccess.getJobAccess().getRunTimeAssignment_4_1(), "rule__Job__RunTimeAssignment_4_1");
			builder.put(grammarAccess.getJobAccess().getJobTypeAssignment_5_1(), "rule__Job__JobTypeAssignment_5_1");
			builder.put(grammarAccess.getJobAccess().getTECH_SYSTEMAssignment_6_1(), "rule__Job__TECH_SYSTEMAssignment_6_1");
			builder.put(grammarAccess.getJobAccess().getExecutableNameAssignment_7_1(), "rule__Job__ExecutableNameAssignment_7_1");
			builder.put(grammarAccess.getJobAccess().getPreDecessorAssignment_8_2(), "rule__Job__PreDecessorAssignment_8_2");
			builder.put(grammarAccess.getJobAccess().getPreDecessorAssignment_8_3_1(), "rule__Job__PreDecessorAssignment_8_3_1");
			builder.put(grammarAccess.getJobAccess().getPpPreDecessorprocessingpointAssignment_9_1(), "rule__Job__PpPreDecessorprocessingpointAssignment_9_1");
			builder.put(grammarAccess.getJobAccess().getIsTestJobAssignment_10(), "rule__Job__IsTestJobAssignment_10");
			builder.put(grammarAccess.getProcessingPointAccess().getNameAssignment_2(), "rule__ProcessingPoint__NameAssignment_2");
			builder.put(grammarAccess.getProcessingPointAccess().getProcessingPointTypeAssignment_4_1(), "rule__ProcessingPoint__ProcessingPointTypeAssignment_4_1");
			builder.put(grammarAccess.getProcessingPointAccess().getPreDecessorAssignment_5_2(), "rule__ProcessingPoint__PreDecessorAssignment_5_2");
			builder.put(grammarAccess.getProcessingPointAccess().getPreDecessorAssignment_5_3_1(), "rule__ProcessingPoint__PreDecessorAssignment_5_3_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private JobDslGrammarAccess grammarAccess;

	@Override
	protected InternalJobDslParser createParser() {
		InternalJobDslParser result = new InternalJobDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public JobDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(JobDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
